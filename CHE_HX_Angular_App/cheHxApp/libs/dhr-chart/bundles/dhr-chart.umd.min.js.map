{"version":3,"sources":["ng://dhr-chart/lib/dhr-chart.service.ts","ng://dhr-chart/lib/dhr-chart.component.ts","ng://dhr-chart/lib/dhr-chart.component.html","ng://dhr-chart/lib/dhr-chart.module.ts"],"names":["DhrChartService","factory","ɵfac","providedIn","DhrChartComponent","prototype","ngOnInit","this","loadChart","chartData","xAxisLabel","yAxislabel","chartLabel","chartTitle","showyAxisLabel","showToolbox","showToolTip","showxAxisLabel","isKpiOverView","color","ngOnChanges","changes","ngAfterViewInit","d","xl","yl","cl","ct","yAxisLabelFlag","toolboxFlag","tooltipFlag","xAxisLabelFlag","kpiOverviewflag","colorValues","isMultiSeries","getMultiSeriesChartOptions","chartOption","getChartOptions","showMarkLine","chartColorProperty","data","type","label","position","distance","formatter","params","value","lineStyle","width","symbol","title","text","left","top","triggerEvent","textStyle","fontSize","padding","show","toolbox","orient","showTitle","feature","saveAsImage","tooltip","param","backgroundColor","extraCssText","trigger","axisPointer","lable","precision","Date","name","toString","split","join","getHours","slice","getMinutes","grid","containLabel","xAxis","axisLabel","axisTick","alignWithLabel","splitNumber","yAxis","nameLocation","nameTextStyle","align","verticalAlign","lineHeight","fontFamily","fontWeight","legend","series","smooth","symbolSize","markLine","xaxis","yaxis","_this","legends","yAxisOptions","seriseData","forEach","y","index","push","sort","generateYAxisOption","generateSeriseData","getMultiChartOptions","yOffset","Math","floor","nameGap","min","max","axisLine","onZero","offset","yAxisIndex","dataZoom","zoom","back","dataView","readOnly","lang","magicType","restore","icon","formatTime","datePipe","DatePipe","transform","selectors","inputs","features","core","ɵɵNgOnChangesFeature","decls","vars","consts","template","rf","ctx","i0.ɵɵelement","i0.ɵɵproperty","DhrChartModule","imports","CommonModule","NgxEchartsModule","forRoot","echarts","import","declarations","ngxEcharts","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DhrChartService {\r\n\r\n  constructor() { }\r\n}\r\n","import { DatePipe } from '@angular/common';\r\nimport { Component, OnInit, Input, SimpleChanges } from '@angular/core';\r\nimport { EChartOption } from 'echarts';\r\nimport * as echarts from 'echarts';\r\n\r\n@Component({\r\n  selector: 'dhr-chart',\r\n  templateUrl: './dhr-chart.component.html',\r\n  styleUrls: ['./dhr-chart.component.css']\r\n})\r\nexport class DhrChartComponent implements OnInit {\r\n\r\n  @Input() chartData: any;\r\n  @Input() xAxisLabel: any;\r\n  @Input() yAxislabel: any;\r\n  @Input() chartLabel: any;\r\n  @Input() chartTitle: any;\r\n  @Input() magicType: boolean;\r\n  @Input() saveAsImage: boolean;\r\n  @Input() isMultiSeries: boolean;\r\n  @Input() showyAxisLabel: boolean;\r\n  @Input() showToolbox: boolean;\r\n  @Input() showToolTip: boolean;\r\n  @Input() showxAxisLabel: boolean;\r\n  @Input() isKpiOverView: boolean;\r\n  @Input() color;\r\n\r\n  chartOption: EChartOption;\r\n  options: EChartOption;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadChart(this.chartData, this.xAxisLabel, this.yAxislabel, this.chartLabel, this.chartTitle,\r\n       this.showyAxisLabel, this.showToolbox, this.showToolTip, this.showxAxisLabel, this.isKpiOverView, this.color);\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\r\n    // Add '${implements OnChanges}' to the class.\r\n    this.loadChart(this.chartData, this.xAxisLabel, this.yAxislabel, this.chartLabel, \r\n      this.chartTitle, this.showyAxisLabel, this.showToolbox, this.showToolTip, this.showxAxisLabel, this.isKpiOverView, this.color);\r\n  }\r\n  ngAfterViewInit(): void {\r\n    // Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\r\n    // Add 'implements AfterViewInit' to the class.\r\n    this.loadChart(this.chartData, this.xAxisLabel, this.yAxislabel, \r\n    this.chartLabel, this.chartTitle, this.showyAxisLabel, this.showToolbox, this.showToolTip,\r\n     this.showxAxisLabel, this.isKpiOverView, this.color);\r\n  }\r\n  loadChart(d, xl, yl, cl, ct, yAxisLabelFlag, toolboxFlag, tooltipFlag, xAxisLabelFlag, kpiOverviewflag, colorValues) {\r\n    if (this.isMultiSeries) {\r\n      this.getMultiSeriesChartOptions(this.xAxisLabel, this.yAxislabel, this.chartData);\r\n    } else {\r\n      this.chartOption = this.getChartOptions(d, xl, yl, cl, ct,\r\n      yAxisLabelFlag, toolboxFlag, tooltipFlag, xAxisLabelFlag, kpiOverviewflag, colorValues);\r\n    }\r\n  }\r\n\r\n  getChartOptions(d, xl, yl, cl, ct, yAxisLabelFlag, toolboxFlag, tooltipFlag, xAxisLabelFlag, kpiOverviewflag, colorValues): any {\r\n    let showMarkLine = {};\r\n    let chartColorProperty = '#009DDC';\r\n    if (!kpiOverviewflag){\r\n      showMarkLine = {\r\n        data: [\r\n          {\r\n            type: 'average',\r\n            label: {\r\n              position: 'End',\r\n              distance: 5,\r\n              formatter: (params) => {\r\n                return `${params.value}`;\r\n              },\r\n            },\r\n            lineStyle: { color: '#707070', width: 2 },\r\n          },\r\n        ],\r\n        symbol: 'none',\r\n      }\r\n    }\r\n    if (kpiOverviewflag) {\r\n      chartColorProperty = colorValues;\r\n    }\r\n    return {\r\n      title: {\r\n        text: ct,\r\n        left: 'left',\r\n        top: 'left',\r\n        triggerEvent: true,\r\n        textStyle: {\r\n          fontSize: 13,\r\n        },\r\n        padding: [\r\n          15, // up\r\n          10, // right\r\n          5, // down\r\n          10, // left\r\n        ],\r\n        show: false,\r\n      },\r\n      toolbox: {\r\n        show: toolboxFlag,\r\n        orient: 'vertical',\r\n        showTitle: false,\r\n        feature: {\r\n          saveAsImage: {\r\n            title: 'Save Image',\r\n          },\r\n        },\r\n        tooltip: {\r\n          show: true,\r\n          formatter: (param) => {\r\n            return '<div>' + param.title + '</div>';\r\n          },\r\n          backgroundColor: '#222',\r\n          textStyle: {\r\n            fontSize: 8,\r\n          },\r\n          extraCssText: 'box-shadow: 0 0 1px rgba(0, 0, 0, 0.3);', // user-defined CSS styles\r\n        },\r\n      },\r\n      tooltip: {\r\n        show: tooltipFlag,\r\n        trigger: 'axis',\r\n        backgroundColor: '#FFFFFF',\r\n        axisPointer: {\r\n          type: 'line',\r\n          lable: {\r\n            precision: 1,\r\n          },\r\n        },\r\n        formatter: (params) => {\r\n          return `<div style=\" padding: 10px 10px 20px 10px;\r\n          box-shadow: 2px 2px 4px 2px #aaaaaa;\r\n          background-color: white;\">\r\n          <span style=\"color: #808080;font-size: 12px;\">${\r\n            new Date(params[0].name).toString().split(' ', 4).join(' ') +\r\n            ' ' +\r\n            ('0' + new Date(params[0].name).getHours()).slice(-2) +\r\n            ':' +\r\n            ('0' + new Date(params[0].name).getMinutes()).slice(-2)\r\n            }</span><br>\r\n                  <span style=\"color: #333333; font-size: 12px\">${yl}</span>\r\n                  &nbsp;&nbsp;&nbsp;\r\n                  <span style=\"color: #333333; font-size: 14px; text-align:right; font-weight:700\">${\r\n            params[0].value[1]\r\n            }&nbsp;${xl}</span></div>`;\r\n        },\r\n      },\r\n      grid: {\r\n        containLabel: true,\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        show: xAxisLabelFlag,\r\n        axisLabel: {\r\n          color: '#808080',\r\n        },\r\n        axisTick: {\r\n          alignWithLabel: true,\r\n        },\r\n        splitNumber: 1,\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: yl,\r\n        nameLocation: 'middle',\r\n        show: yAxisLabelFlag,\r\n        axisLabel: {\r\n          color: '#808080',\r\n        },\r\n        nameTextStyle: {\r\n          align: 'center',\r\n          verticalAlign: 'bottom',\r\n          lineHeight: 150,\r\n          fontSize: 12,\r\n          fontFamily: \"Segoe UI\",\r\n          color: '#808080',\r\n          fontWeight: 'normal',\r\n        },\r\n      },\r\n      legend: {\r\n        left: 'right',\r\n        textStyle: {\r\n          color: '#808080',\r\n          fontSize: '10',\r\n          fontWeight: 'bold',\r\n          align: 'left',\r\n        },\r\n        padding: [\r\n          10, // up\r\n          70, // right\r\n          0, // down\r\n          0, // left\r\n        ],\r\n      },\r\n      series: [\r\n        {\r\n          name: cl,\r\n          smooth: false,\r\n          symbol: 'circle',\r\n          color: chartColorProperty,\r\n          symbolSize: 2,\r\n          data: d,\r\n          type: 'line',\r\n          lineStyle: {\r\n            color: colorValues,\r\n            width: 2,\r\n          },\r\n          markLine: showMarkLine,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  getMultiSeriesChartOptions(xaxis, yaxis, data): void {\r\n    const legends = [];\r\n    const yAxisOptions = [];\r\n    // const colors = [\r\n    //   '#4F95D4',\r\n    //   '#D53B8D',\r\n    //   '#03B711'\r\n    // ];\r\n    const seriseData = [];\r\n    yaxis.forEach((y, index) => {\r\n      legends.push(y.name);\r\n      legends.sort();\r\n      yAxisOptions.push(this.generateYAxisOption(index, y));\r\n      seriseData.push(\r\n        this.generateSeriseData(index, y, data)\r\n      );\r\n    });\r\n    this.chartOption = this.getMultiChartOptions(\r\n      legends,\r\n      xaxis,\r\n      yAxisOptions,\r\n      seriseData,\r\n    );\r\n  }\r\n\r\n  generateYAxisOption(index, y): any {\r\n    // const yAxisPosition = index % 2 !== 0 ? 'right' : 'left';\r\n    // const yAxisColor = colors[index];\r\n   // const nameTextPadding = yAxisPosition === 'left' ? [0, 2, 0, 0] : [0, 0, 0, 2]; // [top, right, bottom, left]\r\n    const yOffset = Math.floor(index / 2) * 40;\r\n    const yaxisoption = {\r\n      type: 'value',\r\n      name: y.name,\r\n      nameLocation: 'center',\r\n      nameGap: 65,\r\n      nameTextStyle: {\r\n        align: 'end',\r\n        // verticalAlign: 'bottom',\r\n        fontSize: 12,\r\n        fontFamily: \"Segoe UI\",\r\n        color: '#808080',\r\n        fontWeight: 'normal',\r\n      },\r\n      min: y.min,\r\n      max: y.max,\r\n      padding: [3, 0, 0, 0],\r\n     // position: yAxisPosition,\r\n      axisLine: {\r\n        onZero: true,\r\n        lineStyle: {\r\n          // color: yAxisColor,\r\n          width: 2\r\n        }\r\n      },\r\n      offset: yOffset,\r\n      axisLabel: {\r\n        show: true,\r\n        formatter: '{value}'\r\n      },\r\n    };\r\n    return yaxisoption;\r\n  }\r\n\r\n  generateSeriseData(index, y, data): any {\r\n    const seriseObj = {\r\n      name: y.name,\r\n      type: 'line',\r\n      yAxisIndex: index,\r\n      lineStyle: {\r\n        //color: colors[index],\r\n        width: 2\r\n      },\r\n      markLine: {\r\n        symbol: 'none'\r\n      },\r\n      data: data[index]\r\n    };\r\n    return seriseObj;\r\n  }\r\n\r\n  getMultiChartOptions(legends, xaxis, yaxis, seriseData): any {\r\n    return {\r\n      //colors: colors,\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        backgroundColor: '#FFFFFF',\r\n        textStyle: {\r\n          color: '#808080',\r\n          fontSize: '10',\r\n          fontWeight: 'bold',\r\n          align: 'left',\r\n        },\r\n        axisPointer: {\r\n          type: 'cross',\r\n          lable: {\r\n            precision: 1,\r\n          },\r\n        }\r\n      },\r\n      toolbox: {\r\n        feature: {\r\n          dataZoom: {\r\n            yAxisIndex: 'none',\r\n            title : {\r\n              zoom : 'Zoom',\r\n              back : 'Zoom Reset'\r\n            }\r\n          },\r\n          dataView: {\r\n            readOnly: true,\r\n            title: 'Data View',\r\n            lang : ['Data View', 'Close']\r\n          },\r\n          magicType: { show: false, type: ['line'] },\r\n          restore: {\r\n            title: 'Restore'\r\n          },\r\n          saveAsImage: {\r\n            title: 'Save Image',\r\n          },\r\n        }\r\n      },\r\n\r\n      legend:\r\n      {\r\n        left: 'right',\r\n        textStyle: {\r\n          color: '#808080',\r\n          fontSize: '10',\r\n          fontWeight: 'bold',\r\n        },\r\n        padding: [10, 140, 0, 0],\r\n        data: legends.sort(),\r\n        icon: 'circle',\r\n      },\r\n      xAxis: [\r\n        {\r\n          type: 'category',\r\n          data: xaxis\r\n        }\r\n      ],\r\n      yAxis: yaxis,\r\n      series: seriseData\r\n    };\r\n  }\r\n\r\n  formatTime(value): any {\r\n    const datePipe = new DatePipe('en-US');\r\n    const tempDate =\r\n      datePipe.transform(new Date(value), 'dd/MM/yyyy') +\r\n      '\\n' +\r\n      datePipe.transform(new Date(value), 'shortTime');\r\n    return tempDate;\r\n  }\r\n}","<div [ngClass]=\"isKpiOverView ? 'kpiOverview' : 'commonChart'\"\r\n  echarts\r\n  [options]=\"chartOption\"\r\n></div>\r\n","import { NgModule } from '@angular/core';\r\nimport { DhrChartComponent } from './dhr-chart.component';\r\nimport { NgxEchartsModule } from 'ngx-echarts';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [DhrChartComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts: () => import('echarts'),\r\n    }),\r\n  ],\r\n  exports: [DhrChartComponent]\r\n})\r\nexport class DhrChartModule { }\r\n"]}