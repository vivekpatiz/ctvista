pipeline {
    agent { label 'buildslave' }
    parameters {
               string(defaultValue: "CHE_HX_Angular_App", description: 'API name', name: 'CI_NAME')
               string(defaultValue: "", description: 'Release Version', name: 'RELEASE_VERSION')
               }
    environment {
                PROJECT_NAME = "projectashton"
                DOCKER_REGISTRY = "quay.io"
				BUILD_VERSION=""
                }
    options {
            skipDefaultCheckout()
            }
    stages {
        stage('Checkout code') {
            steps {
                checkout scm
            }
        }
        stage('Docker login'){
            steps{
                withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD', usernameVariable : 'DOCKER_USERNAME', \
                    credentialsId : "8ac0c641-f31f-410f-bba2-c86d7ac0d32a")]){
                    script
                    {
                        sh 'docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" quay.io'
                    }
                }
            }
        }
    stage('Build') {
            agent{
                docker {
                    image "quay.io/projectashton/devops-base-images:base-npm-ci-2.0"
                    reuseNode true
				args '-u root --privileged'
                }
            }
            steps {
                script{
                    dir("$env.WORKSPACE/$CI_NAME/cheHxApp"){
						
						BUILD_VERSION=""
						if( params.RELEASE_VERSION == "" ) {
                                BUILD_VERSION=sh ( script: "cat package.json| head -3 | grep version | awk -F ':' '{print \$2}' |awk -F '\"' '{print \$2}'",returnStdout: true).trim()
                               }
                            else
                            {
                                BUILD_VERSION=params.RELEASE_VERSION
                            }
					    def PACKAGE_NAME = "${params.CI_NAME}" + "-" + "${BUILD_VERSION}.zip"
					    
                    
                        STATUS_BUILD = 0
                        STATUS_BUILD = sh(returnStatus: true, script: "npm install; ng build --prod; zip -r ${PACKAGE_NAME} dist/ libs/ package.json server1.js " )
                         if (STATUS_BUILD == 0) {
                             echo "Build is Successful"             
                        }
                        else {
                            echo "Build has been failed, please check logs"
                            sh 'exit 1'   
                        }
                        
                    }
                }
            }
        }
        stage('Sonarqube scan') {
            agent{
                docker {
                    image "quay.io/projectashton/devops-base-images:base-npm-ci-2.0"
                    reuseNode true
		    args '-u root --privileged'
                }
            }
            steps {
                script{
                    dir("$env.WORKSPACE/$CI_NAME/cheHxApp"){
                        echo "running sonar scan"
                        STATUS_SONAR = sh(returnStatus: true, script: 'export JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk;export PATH=$PATH:$JAVA_HOME/bin; /sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner ')
                        if (STATUS_SONAR == 0) {
                             echo "SONARscan run suceessfully and quality gates passed"             
                        }
                        else {
                            echo "SONARscan or quality gate check was unsuccessful"
                            //sh 'exit 1'   
                        }
                    }
                }
            }
            post{
               failure  {
                          slackSend color: "danger", message: "${env.JOB_NAME} [${currentBuild.displayName}] [${currentBuild.result}] : SONARscan or quality gate check was unsuccessful. Please fix and commit the same., Docker image creation skipped\
                            afters ${currentBuild.durationString.replace(' and counting', '')} (<${currentBuild.absoluteUrl}|Open>)"
                            emailext(
                                    subject: "Job '${env.JOB_NAME} ${env.BUILD_NUMBER}'",
                                    body: """SONARscan or quality gate check was unsuccessful. Please fix and commit the same., Docker image creation skipped ,Check console output at "${ env.BUILD_URL }" ${env.JOB_NAME}""",
                                    to: "sudhakar.kannan@danaherdigital.com",
                                    from: "sudhakar.kannan@danaherdigital.com"
                                   )
                          //sh 'exit 1'
                         } 
            }
         } 
        stage('Uploading the artifact to Jfrog Artifactory') {
		  steps {
                script{
                    dir("$env.WORKSPACE/$CI_NAME/cheHxApp"){
						BUILD_VERSION=""
						if( params.RELEASE_VERSION == "" ) {
                                BUILD_VERSION=sh ( script: "cat package.json| head -3 | grep version | awk -F ':' '{print \$2}' |awk -F '\"' '{print \$2}'",returnStdout: true).trim()
                               }
                            else
                            {
                                BUILD_VERSION=params.RELEASE_VERSION
                            }
					    def PACKAGE_NAME = "${params.CI_NAME}" + "-" + "${BUILD_VERSION}.zip"
					    
                        archiveArtifacts artifacts: "${PACKAGE_NAME}", fingerprint: true
                        rtUpload(
                            serverId: 'Jfrog-artifactory',
                            spec: '''{
                                "files": [
                                            {
                                                "pattern": "*.zip",
                                                "target": "chemtreat-qa/"
                                            }
                                        ]
                                    } ''',
                            buildName: '${params.CI_NAME}',
                            buildNumber: '${env.BUILD_NUMBER}'
                    )
                }
            }
        }
    }
	  stage('Triggering QA CD job') {
    steps {
              script {
                    
                      if (jenkins.model.Jenkins.instance.getItemByFullName("ChemTreat/CHE_HX_Angular_App-QA-CD") != null) {
                            build job: "CHE_HX_Angular_App-QA-CD", propagate: false, wait: false, parameters: [
                                string(name: 'CI_NAME', value: "CHE_HX_Angular_App"), string(name: 'RELEASE_VERSION', value: "")]
                        }
                    }
                }
            }
}
 post {

    always {
        cleanWs()
        }
    }
}
